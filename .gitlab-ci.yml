variables:
  DOWNSTREAM: "false"
  GIT_SUBMODULE_STRATEGY: recursive
  HERO_INSTALL: '$CI_PROJECT_DIR/install'
  RUST_LOG: 'memora=debug'
  PATH: '/home/gitlabci/.cargo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/condor/bin:/usr/sepp/bin'

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^upstream-/'
      when: never # do not run branch pipelines for the CI-generated `upstream-` branches
    - when: always # default rule, run job if no previous rule matched

before_script:
  - env
  - mkdir -p $HERO_INSTALL
  - |
    git config --local user.name 'GitLab CI at IIS'
    git config --local user.email 'gitlabci@iis-git.ee.ethz.ch'
  - >
    if [ "$DOWNSTREAM" = "true" ]; then
      # This is a downstream job, i.e., it has been triggered as part of an upstream pipeline.
      # First, make sure that the commit of the upstream repository is available.  That commit might
      # exist only on GitLab.
      if [ "$SUBMODULE_NAME" = "llvm-project" ]; then
        cd toolchain/llvm-project
        git remote set-url origin git@iis-git.ee.ethz.ch:iis-compilers/llvm-project.git
      else
        echo "Error: Unknown submodule '$SUBMODULE_NAME' for downstream pipeline!"
        exit 1
      fi
      git fetch origin
      cd -
      # Second, check out the branch for the tuple of commit in this repository and commit in the
      # upstream repository.  This branch is created by the `pre-downstream-checkout` job.
      if [ "$CI_JOB_NAME" != "pre-downstream-checkout" ]; then
        branch="upstream-$SUBMODULE_NAME-$SUBMODULE_COMMIT_SHA-for-$CI_COMMIT_SHA"
        git checkout --quiet --recurse-submodules "$branch"
        echo "Checked out '$branch', which has the following commit:"
        git show
      fi
    fi

after_script:
  - chmod -R u+w $HERO_INSTALL

stages:
  - build1
  - build2
  - build3
  - build4
  - test

pre-downstream-checkout:
  stage: .pre
  script:
    - |
      if [ "$DOWNSTREAM" = "true" ]; then
        # This is a downstream pipeline, so we need to create a branch with a commit that applies
        # the upstream update.
        branch="upstream-$SUBMODULE_NAME-$SUBMODULE_COMMIT_SHA-for-$CI_COMMIT_SHA"
        git checkout -b "$branch"
        if [ "$SUBMODULE_NAME" = "llvm-project" ]; then
          submodule_path=toolchain/llvm-project
        else
          echo "Error: Unknown submodule '$SUBMODULE_NAME' for downstream pipeline!"
          exit 1
        fi
        cd "$submodule_path"
        git checkout --recurse-submodules "$SUBMODULE_COMMIT_SHA"
        cd -
        git add "$submodule_path"
        git commit -m "$submodule_path: Update to upstream $SUBMODULE_COMMIT_SHA"
        git remote set-url origin git@iis-git.ee.ethz.ch:hero/hero.git
        git push origin "$branch"
      fi

tc-pulp:
  stage: build1
  needs: ["pre-downstream-checkout"]
  script:
    - >
      if ! $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup tc-pulp; then
        make tc-pulp
        chmod -R u+w $HERO_INSTALL
        $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert tc-pulp
      fi

tc-har-olinux:
  stage: build1
  needs: ["pre-downstream-checkout"]
  script:
    - >
      if ! $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup tc-har-olinux; then
        make tc-har-olinux
        chmod -R u+w $HERO_INSTALL
        $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert tc-har-olinux
      fi

tc-hrv-olinux:
  stage: build1
  needs: ["pre-downstream-checkout"]
  script:
    - >
      if ! $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup tc-hrv-olinux; then
        make tc-hrv-olinux
        chmod -R u+w $HERO_INSTALL
        $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert tc-hrv-olinux
      fi

vsim-pulp:
  stage: build1
  needs: ["pre-downstream-checkout"]
  script:
    - >
      if $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup vsim-pulp; then
        exit 0
      fi
    - cd hardware
    - make
    - cd vsim
    - ./compile.sh
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert vsim-pulp

sdk-pulp-and-sdk-har-and-prem:
  stage: build2
  needs: ["tc-pulp", "tc-har-olinux"]
  script:
    - >
      if $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup sdk-pulp-and-sdk-har; then
        if $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup sdk-pulp-and-sdk-har-prem; then
          exit 0
        fi
      fi
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-pulp
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-har-olinux
    - chmod -R u-w $HERO_INSTALL
    - make sdk-pulp # TODO: `sdk-pulp-har` does not seem to work?
    - make sdk-har
    - chmod -R u+w $HERO_INSTALL
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert sdk-pulp-and-sdk-har
    - rm -r "$HERO_INSTALL/aarch64-buildroot-linux-gnu" # To allow new install
    - chmod -R u-w $HERO_INSTALL
    - make prem-set
    - make sdk-har
    - chmod -R u+w $HERO_INSTALL
    - test -f $CI_PROJECT_DIR/output/br-har/target/usr/bin/cmux
    - test -f $HERO_INSTALL/aarch64-buildroot-linux-gnu/sysroot/usr/bin/cmux
    - test -f $CI_PROJECT_DIR/output/br-har/target/usr/lib/libpremnotify.so
    - test -f $HERO_INSTALL/aarch64-buildroot-linux-gnu/sysroot/usr/lib/libpremnotify.so
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert sdk-pulp-and-sdk-har-prem

sdk-pulp-and-sdk-hrv:
  stage: build2
  needs: ["tc-pulp", "tc-hrv-olinux"]
  script:
    - >
      if $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup sdk-pulp-and-sdk-hrv; then
        exit 0
      fi
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-pulp
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-hrv-olinux
    - chmod -R u-w $HERO_INSTALL
    - make sdk-pulp-hrv
    - make sdk-hrv
    - chmod -R u+w $HERO_INSTALL
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert sdk-pulp-and-sdk-hrv

tc-llvm:
  stage: build3
  needs: ["sdk-pulp-and-sdk-har-and-prem"]
  script:
    - >
      if $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup tc-llvm; then
        .gitlab-ci.d/llvm-project-update-hero-branch.sh
        exit 0
      fi
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get sdk-pulp-and-sdk-har
    - chmod -R u-w $HERO_INSTALL
    - export CXX=/usr/pack/gcc-9.2.0-af/linux-x64/bin/g++ # LLVM 12 needs 5.1+
    - export CC=/usr/pack/gcc-9.2.0-af/linux-x64/bin/gcc  # LLVM 12 needs 5.1+
    - make tc-llvm
    - unset CXX # Cleanup after LLVM 12 build
    - unset CC  # Cleanup after LLVM 12 build
    - git diff --exit-code # assert that applied patches made no difference
    - chmod -R u+w $HERO_INSTALL
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert tc-llvm
    - .gitlab-ci.d/llvm-project-update-hero-branch.sh

bitstream-zcu102:
  stage: build3
  needs: ["pre-downstream-checkout"]
  script:
    - >
      if ! $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup bitstream-zcu102; then
        cd hardware/fpga
        make hero_exilzcu102
        $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert bitstream-zcu102
      fi

br-har-exilzcu102-and-prem:
  stage: build4
  needs: ["bitstream-zcu102", "tc-har-olinux", "tc-pulp"]
  script:
    - >
      if $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup br-har-exilzcu102; then
        if $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup br-har-exilzcu102-prem; then
          exit 0
        fi
      fi
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get bitstream-zcu102
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-har-olinux
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-pulp # required to build PULP SDK
    - chmod -R u-w $HERO_INSTALL
    - make sdk-pulp # TODO: `sdk-pulp-har` does not seem to work?
    - echo "BR2_HERO_BITSTREAM=$CI_PROJECT_DIR/hardware/fpga/hero_exilzcu102/hero_exilzcu102.runs/impl_1/hero_exilzcu102_wrapper.bit" >> local.cfg
    - make br-har-exilzcu102
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert br-har-exilzcu102
    - make prem-set
    - make br-har-exilzcu102
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert br-har-exilzcu102-prem

br-hrv-ediggenesys2:
  stage: build4
  needs: ["tc-hrv-olinux"]
  script:
    - >
      if $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup br-hrv-ediggenesys2; then
        exit 0
      fi
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-hrv-olinux
    - chmod -R u-w $HERO_INSTALL
    - make br-hrv-ediggenesys2
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert br-hrv-ediggenesys2

br-hrv-eqemu:
  stage: build4
  needs: ["tc-hrv-olinux"]
  script:
    - >
      if $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup br-hrv-eqemu; then
        exit 0
      fi
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-hrv-olinux
    - chmod -R u-w $HERO_INSTALL
    - make br-hrv-eqemu
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert br-hrv-eqemu

br-hrv-occamy:
  stage: build4
  needs: ["pre-downstream-checkout"]
  script:
    - >
      if $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh lookup br-hrv-occamy; then
        exit 0
      fi
    - chmod -R u+w $HERO_INSTALL
    - make br-hrv-occamy
    - chmod -R u-w $HERO_INSTALL
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh insert br-hrv-occamy

test-zcu102-examples:
  stage: test
  needs: ["vsim-pulp", "tc-pulp", "tc-har-olinux", "tc-llvm", "sdk-pulp-and-sdk-har-and-prem"]
  script:
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get vsim-pulp
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-pulp
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-har-olinux
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-llvm
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get sdk-pulp-and-sdk-har
    - chmod -R u-w $HERO_INSTALL
    - make sdk-pulp # PULP SDK is not relocatable
    - source env/exilzcu102.sh
    ## build examples
    - >
      for d in helloworld mm-large mm-small; do
        make -C openmp-examples/$d all
      done
    ## test benchmarks: compile
    - >
      for d in openmp-examples/polybench-acc/*/; do
        if [ $(basename $d) = "common" ]; then
          continue
        fi
        make -C $d only=pulp clean all
        make -C $d clean all
      done
    ## test benchmarks: simulate
    - source env/esim-exilzcu102.sh
    - >
      for d in openmp-examples/polybench-acc/*/; do
        if [ $(basename $d) = "common" ]; then
          continue
        fi
        make -C $d only=pulp clean all
        .gitlab-ci.d/verify-bench.sh $(basename $d)
      done
    - echo "Cycle counts for Polybench:"
    - cat vsim-polybench-perf-stats.txt
    - >
      for d in openmp-examples/polybench-acc/*/; do
        if [ $(basename $d) = "common" ]; then
          continue
        fi
        .gitlab-ci.d/track-pbench-perf.sh $(basename $d)
      done
  allow_failure:
    exit_codes: 4


compiler-smoketest:
  stage: test
  needs: ["tc-pulp", "tc-har-olinux", "tc-llvm", "sdk-pulp-and-sdk-har-and-prem"]
  script:
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-pulp
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-har-olinux
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-llvm
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get sdk-pulp-and-sdk-har
    - chmod -R u-w $HERO_INSTALL
    - make sdk-pulp # PULP SDK is not relocatable
    - source env/exilzcu102.sh
    - .gitlab-ci.d/compiler-smoketest.sh

compiler-smoketest-prem:
  stage: test
  needs: ["tc-pulp", "tc-har-olinux", "tc-llvm", "sdk-pulp-and-sdk-har-and-prem"]
  script:
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-pulp
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-har-olinux
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-llvm
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get sdk-pulp-and-sdk-har-prem
    - chmod -R u-w $HERO_INSTALL
    - make sdk-pulp # PULP SDK is not relocatable
    - export HERCULES_INSTALL=$HERO_INSTALL # Enable PREM
    - source env/exilzcu102.sh
    - .gitlab-ci.d/compiler-smoketest.sh test-prem # Run with PREM test

simulator-tests-pulp:
  stage: test
  needs: ["vsim-pulp", "tc-pulp", "tc-har-olinux", "tc-llvm", "sdk-pulp-and-sdk-har-and-prem"]
  script:
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get vsim-pulp
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-pulp
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-har-olinux
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get tc-llvm
    - $CI_PROJECT_DIR/.gitlab-ci.d/memora_retry.sh get sdk-pulp-and-sdk-har
    - chmod -R u-w $HERO_INSTALL
    - make sdk-pulp # PULP SDK is not relocatable
    - source env/esim-exilzcu102.sh
    - .gitlab-ci.d/tests-pulp.sh

#doc-pulp-driver:
#  stage: test
#  script:
#    - make -C support/pulp-driver/doc
#  artifacts:
#    paths:
#      - support/pulp-driver/doc/pulp_linux_driver_doc.pdf
