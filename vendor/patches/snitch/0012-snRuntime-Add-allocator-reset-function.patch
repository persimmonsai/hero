From dfeacad5fb5995db80ef035c7fae958d5e7a6c4d Mon Sep 17 00:00:00 2001
From: Noah Huetter <noahhuetter@gmail.com>
Date: Mon, 16 Jan 2023 14:16:46 +0100
Subject: [PATCH 12/16] [snRuntime] Add allocator reset function

---
 sw/snRuntime/include/snrt.h |  1 +
 sw/snRuntime/src/alloc.c    | 14 ++++++++++++++
 2 files changed, 15 insertions(+)

diff --git a/sw/snRuntime/include/snrt.h b/sw/snRuntime/include/snrt.h
index 86b6c60..df28cc6 100644
--- a/sw/snRuntime/include/snrt.h
+++ b/sw/snRuntime/include/snrt.h
@@ -195,6 +195,7 @@ static inline uint32_t __attribute__((pure)) snrt_hartid() {
 //================================================================================
 extern void snrt_alloc_init(struct snrt_team_root *team, uint32_t l3off);
 extern void *snrt_l1alloc(size_t size);
+extern void snrt_l1alloc_reset(void* base);
 extern void *snrt_l3alloc(size_t size);
 
 //================================================================================
diff --git a/sw/snRuntime/src/alloc.c b/sw/snRuntime/src/alloc.c
index 8fb1c01..d23c71a 100644
--- a/sw/snRuntime/src/alloc.c
+++ b/sw/snRuntime/src/alloc.c
@@ -35,6 +35,20 @@ void *snrt_l1alloc(size_t size) {
     return ret;
 }
 
+/**
+ * @brief Reset the L1 allocator to its initial state so that memmory can be re-allocated in L1. 
+ * @details This is a temporary solution until l1free() is implemented
+ * @param base base address to reset to. 0 for initial base, non-zero for custom base
+ */
+void snrt_l1alloc_reset(void* base) {
+    struct snrt_allocator_inst *alloc = &snrt_current_team()->allocator.l1;
+    // team->allocator.l1.base/size is not modified by alloc()
+    if(base == 0)
+      alloc->next = alloc->base;
+    else 
+      alloc->next = base;
+}
+
 /**
  * @brief Allocate a chunk of memory in the L3 memory
  * @details This currently does not support free-ing of memory
-- 
2.16.5

