From 2081f24e54a62e12775044380278eef5babc47ca Mon Sep 17 00:00:00 2001
From: Noah Huetter <noahhuetter@gmail.com>
Date: Wed, 1 Dec 2021 17:30:34 +0100
Subject: [sw/snitch] kernel fixes

Signed-off-by: Noah Huetter <noahhuetter@gmail.com>
---
 sw/applications/src/kernels/gemm.c        | 10 ++++------
 sw/applications/src/layers/conv2d_layer.c | 13 +++++++------
 sw/applications/src/layers/conv2d_layer.h |  7 ++++++-
 sw/applications/src/utils/utils.h         |  9 +++++++++
 sw/snRuntime/include/snrt.h               | 12 ++++++++++--
 sw/snRuntime/src/ssr.c                    | 18 ------------------
 6 files changed, 36 insertions(+), 33 deletions(-)

diff --git a/sw/applications/src/kernels/gemm.c b/sw/applications/src/kernels/gemm.c
index 159d76b..380fcb5 100644
--- a/sw/applications/src/kernels/gemm.c
+++ b/sw/applications/src/kernels/gemm.c
@@ -146,7 +146,6 @@ void gemm_fp64_ssr_frep(uint32_t M, uint32_t N, uint32_t K, double* A,
     // SSR start address need to be configured each time
     snrt_ssr_read(SNRT_SSR_DM0, SNRT_SSR_4D, A);
     snrt_ssr_read(SNRT_SSR_DM1, SNRT_SSR_4D, B);
-    snrt_ssr_enable();
 
     for (uint32_t m = 0; m < M; m++) {
         uint32_t n = 0;
@@ -174,6 +173,8 @@ void gemm_fp64_ssr_frep(uint32_t M, uint32_t N, uint32_t K, double* A,
                 c[7] = 0.0;
             }
 
+            snrt_ssr_enable();
+
             asm volatile(
                 "frep.o %[n_frep], 8, 0, 0 \n"
                 "fmadd.d %[c0], ft0, ft1, %[c0] \n"
@@ -190,6 +191,8 @@ void gemm_fp64_ssr_frep(uint32_t M, uint32_t N, uint32_t K, double* A,
                 : [ n_frep ] "r"(K - 1)
                 : "ft0", "ft1");
 
+            snrt_ssr_disable();
+
             // Store results back
             C[m * ldC + n + 0] = c[0];
             C[m * ldC + n + 1] = c[1];
@@ -203,7 +206,6 @@ void gemm_fp64_ssr_frep(uint32_t M, uint32_t N, uint32_t K, double* A,
         }
 
         // Clean up of leftover columns
-        snrt_ssr_disable();
 
         for (; n < N; n++) {
             double c;
@@ -217,12 +219,8 @@ void gemm_fp64_ssr_frep(uint32_t M, uint32_t N, uint32_t K, double* A,
             }
             C[m * ldC + n] = c;
         }
-
-        snrt_ssr_enable();
     }
 
-    snrt_ssr_disable();
-
     asm volatile("" ::"f"(ft0), "f"(ft1), "f"(ft2));
 }
 
diff --git a/sw/applications/src/layers/conv2d_layer.c b/sw/applications/src/layers/conv2d_layer.c
index 405327c..0ef4a94 100644
--- a/sw/applications/src/layers/conv2d_layer.c
+++ b/sw/applications/src/layers/conv2d_layer.c
@@ -12,11 +12,11 @@
 #define min(a,b) ((a)<(b)?(a):(b))
 #define max(a,b) ((a)>(b)?(a):(b))
 
-void conv2d_layer(layer l) {
+void conv2d_layer(layer l, computeConfig_t *ccfg) {
 
-    uint32_t cluster_num = snrt_cluster_num();
+    uint32_t cluster_num = ccfg->cluster_num;
     uint32_t cluster_id = snrt_cluster_idx();
-    uint32_t compute_num = snrt_cluster_compute_core_num();
+    uint32_t compute_num = ccfg->compute_num;
     uint32_t compute_id = snrt_cluster_compute_core_idx();
 
     const uint32_t cluster_per_quadrant = min(4, cluster_num);
@@ -88,6 +88,7 @@ void conv2d_layer(layer l) {
 
                 // Weights are stored in CO x FH x FW x CI format with additional padding
                 // (CI + 1) to prevent banking conflicts
+                // a cluster of 8 cores needs 8 sets of filters, each core computes an output channel
                 for (uint32_t _co = 0; _co < 8; _co++) {
 
                     if (l.TILE_CI == l.CI) {
@@ -261,7 +262,7 @@ void conv2d_layer(layer l) {
                         // Wait for im2col transform to end, and synchronize with compute cores
                         snrt_dma_wait_all();
                         snrt_dma_stop_tracking();
-                        snrt_cluster_sw_barrier();
+                        snrt_cluster_hw_barrier();
                         benchmark_get_cycle();
 
                         // Transfer back the output feature maps
@@ -290,7 +291,7 @@ void conv2d_layer(layer l) {
 
                         // Wait until DMA core has finished the im2col transform
                         benchmark_get_cycle();
-                        snrt_cluster_sw_barrier();
+                        snrt_cluster_hw_barrier();
                         benchmark_get_cycle();
 
                         // Each core performs a matrix multiplication on the im2col buffer
@@ -325,7 +326,7 @@ void conv2d_layer(layer l) {
                 }
             }
 
-            snrt_cluster_sw_barrier();
+            snrt_cluster_hw_barrier();
 
 
             // Transfer back last output tile
diff --git a/sw/applications/src/layers/conv2d_layer.h b/sw/applications/src/layers/conv2d_layer.h
index b4ddc4d..66c3d56 100644
--- a/sw/applications/src/layers/conv2d_layer.h
+++ b/sw/applications/src/layers/conv2d_layer.h
@@ -2,4 +2,9 @@
 // Licensed under the Apache License, Version 2.0, see LICENSE for details.
 // SPDX-License-Identifier: Apache-2.0
 
-void conv2d_layer(layer l);
+#pragma once
+
+#include "layer.h"
+#include "utils.h"
+
+void conv2d_layer(layer l, computeConfig_t *ccfg);
diff --git a/sw/applications/src/utils/utils.h b/sw/applications/src/utils/utils.h
index f3d8b5e..bd44d98 100644
--- a/sw/applications/src/utils/utils.h
+++ b/sw/applications/src/utils/utils.h
@@ -2,9 +2,18 @@
 // Licensed under the Apache License, Version 2.0, see LICENSE for details.
 // SPDX-License-Identifier: Apache-2.0
 
+#pragma once
+
 #include "snrt.h"
 #include "layer.h"
 
+typedef struct computeConfig
+{
+    uint32_t cluster_num;
+    uint32_t compute_num;
+} computeConfig_t;
+
+
 /**
  * @brief returns cycle number and injects maker
  * to track performance
diff --git a/sw/snRuntime/include/snrt.h b/sw/snRuntime/include/snrt.h
index 03af258..13fd742 100644
--- a/sw/snRuntime/include/snrt.h
+++ b/sw/snRuntime/include/snrt.h
@@ -146,8 +146,16 @@ extern void snrt_ssr_loop_4d(enum snrt_ssr_dm dm, size_t b0, size_t b1,
                              size_t b2, size_t b3, size_t i0, size_t i1,
                              size_t i2, size_t i3);
 extern void snrt_ssr_repeat(enum snrt_ssr_dm dm, size_t count);
-extern void snrt_ssr_enable();
-extern void snrt_ssr_disable();
+
+/// Enable/Disable SSR
+#ifdef __TOOLCHAIN_LLVM__
+#define snrt_ssr_enable() __builtin_ssr_enable()
+#define snrt_ssr_disable() __builtin_ssr_disable()
+#else
+#define snrt_ssr_enable() asm volatile("csrsi 0x7C0, 1")
+#define snrt_ssr_disable() asm volatile("csrci 0x7C0, 1")
+#endif
+
 extern void snrt_ssr_read(enum snrt_ssr_dm dm, enum snrt_ssr_dim dim,
                           volatile void *ptr);
 extern void snrt_ssr_write(enum snrt_ssr_dm dm, enum snrt_ssr_dim dim,
diff --git a/sw/snRuntime/src/ssr.c b/sw/snRuntime/src/ssr.c
index ee396aa..3f6bb1b 100644
--- a/sw/snRuntime/src/ssr.c
+++ b/sw/snRuntime/src/ssr.c
@@ -3,23 +3,5 @@
 // SPDX-License-Identifier: Apache-2.0
 #include "snrt.h"
 
-/// Enable SSR.
-void snrt_ssr_enable() {
-#ifdef __TOOLCHAIN_LLVM__
-    __builtin_ssr_enable();
-#else
-    asm volatile("csrsi 0x7C0, 1");
-#endif
-}
-
-/// Disable SSR.
-void snrt_ssr_disable() {
-#ifdef __TOOLCHAIN_LLVM__
-    __builtin_ssr_disable();
-#else
-    asm volatile("csrci 0x7C0, 1");
-#endif
-}
-
 /// Synchronize the integer and float pipelines.
 void snrt_fpu_fence() { asm volatile("fmv.x.w zero, fa0"); }
-- 
2.15.1

