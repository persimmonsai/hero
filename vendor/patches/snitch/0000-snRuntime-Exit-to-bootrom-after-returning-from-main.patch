From 56308eb5ab1d59a05991aef3fbaeb7f3ccb03f85 Mon Sep 17 00:00:00 2001
From: Noah Huetter <noahhuetter@gmail.com>
Date: Wed, 24 Nov 2021 10:05:46 +0100
Subject: [snRuntime] Exit to bootrom after returning from main

Signed-off-by: Noah Huetter <noahhuetter@gmail.com>
---
 sw/snRuntime/link/common.ld.in   |  2 ++
 sw/snRuntime/src/start.S         | 17 ++++++++++++++++-
 sw/snRuntime/src/start_banshee.S |  3 +++
 sw/snRuntime/src/start_cluster.S |  3 +++
 4 files changed, 24 insertions(+), 1 deletion(-)

diff --git a/sw/snRuntime/link/common.ld.in b/sw/snRuntime/link/common.ld.in
index 41ec54d..7b302f7 100644
--- a/sw/snRuntime/link/common.ld.in
+++ b/sw/snRuntime/link/common.ld.in
@@ -12,6 +12,8 @@ MEMORY
 
 SECTIONS
 {
+  /* make sure the init section is at the beginning of the binary */
+  .init : { *(.init) } >DRAM
   /* The program code and other data goes into DRAM */
   .text :
   {
diff --git a/sw/snRuntime/src/start.S b/sw/snRuntime/src/start.S
index 1574452..bbb4d92 100644
--- a/sw/snRuntime/src/start.S
+++ b/sw/snRuntime/src/start.S
@@ -22,6 +22,8 @@ snrt.crt0.init_global_pointer:
     .option pop
 
 snrt.crt0.init_core_info:
+    # store return address and later push it to the stack
+    mv        s1, ra
     # Information passed into the call:
     # - a0: mhartid (from bootloader)
     # - a1: device tree ptr (from bootloader)
@@ -153,6 +155,10 @@ snrt.crt0.init_tls:
     blt       t0, t2, 1b
 2:
 
+    # Store bootloader return address on top of stack
+    addi      sp, sp, -4
+    sw        s1, 0(sp)
+
     # Initialize the root team.
 snrt.crt0.init_team:
     addi      sp, sp, -20
@@ -193,11 +199,20 @@ snrt.crt0.post_barrier:
     # Write execution result to EOC register.
 snrt.crt0.end:
     mv        a0, s0 # recover return value of main function in s0
+    # Return value
+    # a0 - non-zero instructs jump outside of snRuntime to ra when entered snrt
     call      _snrt_exit
+    bnez      a0, snrt.crt0.exit
 1:
     wfi
     j       1b
 
+snrt.crt0.exit:
+    # load bootloader return address from stack and jump out of snRuntime
+    lw        ra, 0(sp)
+    addi      sp, sp, 4
+    jr        ra
+
 __snrt_crt0_interrupt_handler:
     .align 4
     .globl __snrt_crt0_interrupt_handler
@@ -258,7 +273,7 @@ __snrt_crt0_interrupt_handler:
     fsd     f30, 8(sp)
     fsd     f31, 0(sp)
     # state is stored, can now handle the interrupt
-1:  
+1:
     call    __snrt_isr
     # restore fp context
     csrr    t0, misa
diff --git a/sw/snRuntime/src/start_banshee.S b/sw/snRuntime/src/start_banshee.S
index 55c88a1..4c592c1 100644
--- a/sw/snRuntime/src/start_banshee.S
+++ b/sw/snRuntime/src/start_banshee.S
@@ -52,6 +52,9 @@ _snrt_exit:
     ori       a0, a0, 1
     la        t0, scratch_reg
     sw        a0, 0(t0)
+
+    # load 0 -> a0 to idle-loop after this function
+    li        a0, 0
 1:  ret
 
 .set tcdm_start_address_reg, 0x40000000
diff --git a/sw/snRuntime/src/start_cluster.S b/sw/snRuntime/src/start_cluster.S
index 98cc6f3..6d39a70 100644
--- a/sw/snRuntime/src/start_cluster.S
+++ b/sw/snRuntime/src/start_cluster.S
@@ -70,6 +70,9 @@ _snrt_exit:
     ori       t0, t0, 1
     la        t1, tohost
     sw        t0, 0(t1)
+
+    # load 1 -> a0 to jump out of snRuntime after this function
+    li        a0, 1
 1:  ret
 
 # HTIF sections
-- 
2.15.1

