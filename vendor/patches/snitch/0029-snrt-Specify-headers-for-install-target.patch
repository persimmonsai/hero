From a96fb99c8f0f7c11ee6c59c4a52170c3a437e4ee Mon Sep 17 00:00:00 2001
From: Noah Huetter <noahhuetter@gmail.com>
Date: Mon, 16 May 2022 14:51:08 +0200
Subject: snrt: Specify headers for install target

Signed-off-by: Noah Huetter <noahhuetter@gmail.com>
---
 sw/cmake/SnitchUtilities.cmake |  7 +++++++
 sw/snBLAS/CMakeLists.txt       |  9 +++++++++
 sw/snRuntime/CMakeLists.txt    | 32 ++++++++++++++++++++++++--------
 3 files changed, 40 insertions(+), 8 deletions(-)

diff --git a/sw/cmake/SnitchUtilities.cmake b/sw/cmake/SnitchUtilities.cmake
index 522467a..c556769 100644
--- a/sw/cmake/SnitchUtilities.cmake
+++ b/sw/cmake/SnitchUtilities.cmake
@@ -32,6 +32,13 @@ macro(add_snitch_library name)
         TARGET ${name}
         POST_BUILD
         COMMAND ${CMAKE_OBJDUMP} -dhS $<TARGET_FILE:${name}> > $<TARGET_FILE:${name}>.s)
+    set_target_properties(${name} PROPERTIES
+      PUBLIC_HEADER "${public_headers}")
+    install(TARGETS ${name}
+      RUNTIME DESTINATION bin
+      LIBRARY DESTINATION lib
+      ARCHIVE DESTINATION lib/static
+      PUBLIC_HEADER DESTINATION include)
 endmacro()
 
 macro(add_snitch_executable name)
diff --git a/sw/snBLAS/CMakeLists.txt b/sw/snBLAS/CMakeLists.txt
index d020eb2..a1b3422 100644
--- a/sw/snBLAS/CMakeLists.txt
+++ b/sw/snBLAS/CMakeLists.txt
@@ -28,6 +28,15 @@ endif()
 include_directories(include)
 include_directories(${SNRUNTIME_INCLUDE_DIRS})
 
+# Public headers to install
+set(public_headers
+  include/snblas.h
+  include/axpy.h
+  include/axpy.h
+  include/knn_data.h
+  include/knn.h
+)
+
 add_snitch_library(snBLAS src/axpy.c src/knn.c)
 
 # Tests
diff --git a/sw/snRuntime/CMakeLists.txt b/sw/snRuntime/CMakeLists.txt
index 24afc3e..d4e3727 100644
--- a/sw/snRuntime/CMakeLists.txt
+++ b/sw/snRuntime/CMakeLists.txt
@@ -6,6 +6,7 @@ cmake_minimum_required(VERSION 3.13)
 
 # Allow snRuntime to be built as a standalone library.
 if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
+    message(STATUS "Building standlone library")
     # Read SnitchUtilities
     list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../cmake)
     include(SnitchUtilities)
@@ -23,14 +24,9 @@ else()
         PARENT_SCOPE)
 endif()
 
-# Default memory regions
-if(SNITCH_RUNTIME STREQUAL "snRuntime-cluster")
-    set(MEM_DRAM_ORIGIN "0x80000000" CACHE STRING "Base address of external memory")
-    set(MEM_DRAM_SIZE "0x80000000" CACHE STRING "Size of external memory")
-else()
-    set(MEM_DRAM_ORIGIN "0x80000000" CACHE STRING "Base address of external memory")
-    set(MEM_DRAM_SIZE "256M" CACHE STRING "Size of external memory")
-endif()
+# Generate linker script
+set(MEM_DRAM_ORIGIN 0x80000000 CACHE STRING "Base address of external memory")
+set(MEM_DRAM_SIZE 0x80000000 CACHE STRING "Size of external memory")
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/link/common.ld.in common.ld @ONLY)
 set(LINKER_SCRIPT ${CMAKE_CURRENT_BINARY_DIR}/common.ld CACHE PATH "")
 
@@ -54,6 +50,23 @@ include_directories(
     vendor/riscv-opcodes
 )
 
+# Public headers to install
+set(public_headers
+  include/debug.h
+  include/dm.h
+  include/eu.h
+  include/interface.h
+  include/kmp.h
+  include/occamy_soc_peripheral.h
+  include/omp.h
+  include/perf_cnt.h
+  include/snitch_cluster_peripheral.h
+  include/snrt.h
+  include/team.h
+  vendor/printf.h
+  vendor/riscv-opcodes/encoding.h
+)
+
 # Common sources
 set(sources
     src/barrier.c
@@ -100,6 +113,9 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
     add_snitch_library(snRuntime-lethifold src/start_lethifold.S ${sources} src/ssr_v1.c)
     add_snitch_library(snRuntime-thestral src/start_thestral.S ${sources} src/ssr_v1.c)
 
+    # Install linker script
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/common.ld DESTINATION lib)
+
 else()
     # snRuntime is added externally, only build required runtime
     if(SNITCH_RUNTIME STREQUAL "snRuntime")
-- 
2.16.5

