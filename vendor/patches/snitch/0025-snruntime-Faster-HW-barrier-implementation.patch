From 8746c278886d1b301058378848a36f554ca62ad9 Mon Sep 17 00:00:00 2001
From: Noah Huetter <noahhuetter@gmail.com>
Date: Mon, 24 Jan 2022 09:25:16 +0100
Subject: [snruntime] Faster HW-barrier implementation

Signed-off-by: Noah Huetter <noahhuetter@gmail.com>
---
 sw/snRuntime/include/snrt.h      | 72 ++++++++++++++++++++++++++++++++++++----
 sw/snRuntime/include/team.h      |  9 +++++
 sw/snRuntime/src/barrier.c       | 15 +++++++--
 sw/snRuntime/src/start.S         |  4 +--
 sw/snRuntime/src/start_banshee.S |  7 ----
 sw/snRuntime/src/start_banshee.c |  1 +
 sw/snRuntime/src/start_cluster.S | 12 -------
 sw/snRuntime/src/start_cluster.c |  4 ---
 sw/snRuntime/src/team.h          | 45 -------------------------
 9 files changed, 90 insertions(+), 79 deletions(-)
 create mode 100644 sw/vendor/snitch/sw/snRuntime/include/team.h
 delete mode 100644 sw/vendor/snitch/sw/snRuntime/src/team.h

diff --git a/sw/snRuntime/include/snrt.h b/sw/snRuntime/include/snrt.h
index 13fd742..7002688 100644
--- a/sw/snRuntime/include/snrt.h
+++ b/sw/snRuntime/include/snrt.h
@@ -7,6 +7,7 @@
 #include <stdint.h>
 
 #include "encoding.h"
+#include "team.h"
 
 #ifdef __cplusplus
 extern "C" {
@@ -31,11 +32,9 @@ extern "C" {
 #define snrt_max(a, b) ((a) > (b) ? (a) : (b))
 #endif
 
-static inline void *snrt_memset(void *ptr, int value, size_t num) {
-    for (uint32_t i = 0; i < num; ++i)
-        *((uint8_t *)ptr + i) = (unsigned char)value;
-    return ptr;
-}
+//================================================================================
+// Typedefs
+//================================================================================
 
 /// A slice of memory.
 typedef struct snrt_slice {
@@ -61,9 +60,70 @@ struct snrt_barrier {
     uint32_t volatile barrier_iteration;
 };
 
+
+struct snrt_team {
+    /// Pointer to the root team description of this cluster.
+    struct snrt_team_root *root;
+};
+
+struct snrt_allocator_inst {
+    // Base address from where allocation starts
+    uint32_t base;
+    // Number of bytes alloctable
+    uint32_t size;
+    // Address of the next allocated block
+    uint32_t next;
+};
+struct snrt_allocator {
+    struct snrt_allocator_inst l1;
+    struct snrt_allocator_inst l3;
+};
+
+// This struct is placed at the end of each clusters TCDM
+struct snrt_team_root {
+    struct snrt_team base;
+    const void *bootdata;
+    uint32_t global_core_base_hartid;
+    uint32_t global_core_num;
+    uint32_t cluster_idx;
+    uint32_t cluster_num;
+    uint32_t cluster_core_base_hartid;
+    uint32_t cluster_core_num;
+    snrt_slice_t global_mem;
+    snrt_slice_t cluster_mem;
+    struct snrt_allocator allocator;
+    struct snrt_barrier cluster_barrier;
+    uint32_t barrier_reg_ptr;
+    struct snrt_peripherals peripherals;
+};
+
+//================================================================================
+// Inline Functions
+//================================================================================
+
+static inline void *snrt_memset(void *ptr, int value, size_t num) {
+    for (uint32_t i = 0; i < num; ++i)
+        *((uint8_t *)ptr + i) = (unsigned char)value;
+    return ptr;
+}
+
 static inline size_t snrt_slice_len(snrt_slice_t s) { return s.end - s.start; }
 
-extern void snrt_cluster_hw_barrier();
+extern __thread struct snrt_team *_snrt_team_current;
+
+/**
+ * @brief Synchronize cores in a cluster with a hardware barrier
+ *
+ */
+inline void snrt_cluster_hw_barrier() {
+    asm volatile("lw  t0, 0(%[barrier_reg_p])\n"
+                "mv  zero, t0\n"
+                :
+                : [ barrier_reg_p ] "r"(_snrt_team_current->root->barrier_reg_ptr)
+                : "t0" );
+}
+
+// extern void snrt_cluster_hw_barrier();
 extern void snrt_cluster_sw_barrier();
 extern void snrt_global_barrier();
 extern void snrt_barrier(struct snrt_barrier *barr, uint32_t n);
diff --git a/sw/snRuntime/include/team.h b/sw/snRuntime/include/team.h
new file mode 100644
index 0000000..e237dfa
--- /dev/null
+++ b/sw/snRuntime/include/team.h
@@ -0,0 +1,9 @@
+// Copyright 2020 ETH Zurich and University of Bologna.
+// Licensed under the Apache License, Version 2.0, see LICENSE for details.
+// SPDX-License-Identifier: Apache-2.0
+#pragma once
+#include "snrt.h"
+
+extern __thread struct snrt_team *_snrt_team_current;
+extern __thread uint32_t _snrt_core_idx;
+extern const uint32_t _snrt_team_size;
diff --git a/sw/snRuntime/src/barrier.c b/sw/snRuntime/src/barrier.c
index 0463359..e566869 100644
--- a/sw/snRuntime/src/barrier.c
+++ b/sw/snRuntime/src/barrier.c
@@ -4,10 +4,19 @@
 #include "snrt.h"
 #include "team.h"
 
-extern void _snrt_cluster_barrier();
 
-/// Synchronize cores in a cluster with a hardware barrier
-void snrt_cluster_hw_barrier() { _snrt_cluster_barrier(); }
+
+/**
+ * @brief Synchronize cores in a cluster with a hardware barrier
+ *
+ */
+void _snrt_cluster_hw_barrier() {
+    asm volatile("lw  t0, 0(%[barrier_reg_p])\n"
+                "mv  zero, t0\n"
+                :
+                : [ barrier_reg_p ] "r"(_snrt_team_current->root->barrier_reg_ptr)
+                : "t0" );
+}
 
 /// Synchronize cores in a cluster with a software barrier
 void snrt_cluster_sw_barrier() {
diff --git a/sw/snRuntime/src/start.S b/sw/snRuntime/src/start.S
index 09f28f1..c122585 100644
--- a/sw/snRuntime/src/start.S
+++ b/sw/snRuntime/src/start.S
@@ -183,7 +183,7 @@ snrt.crt0.init_interrupt:
     # Synchronize cores.
 snrt.crt0.pre_barrier:
     call      _snrt_hier_wakeup
-    call      _snrt_cluster_barrier
+    call      _snrt_cluster_hw_barrier
 
     # Execute the main function.
 snrt.crt0.main:
@@ -195,7 +195,7 @@ snrt.crt0.main:
 
     # Synchronize cores.
 snrt.crt0.post_barrier:
-    call      _snrt_cluster_barrier
+    call      _snrt_cluster_hw_barrier
 
     # Write execution result to EOC register.
 snrt.crt0.end:
diff --git a/sw/snRuntime/src/start_banshee.S b/sw/snRuntime/src/start_banshee.S
index a4d0347..8a9b656 100644
--- a/sw/snRuntime/src/start_banshee.S
+++ b/sw/snRuntime/src/start_banshee.S
@@ -21,13 +21,6 @@ _snrt_init_core_info:
     lw        a3, tcdm_end_address_reg   # end address of the TCDM
     ret
 
-# Must leave a0 untouched.
-_snrt_cluster_barrier:
-    .globl _snrt_cluster_barrier
-    lw        t0, barrier_reg
-    mv        zero, t0
-    ret
-
 # Mustn't use any non-temporary registers
 # a0 = base_hartid - cluster_id*core_num
 _snrt_get_base_hartid:
diff --git a/sw/snRuntime/src/start_banshee.c b/sw/snRuntime/src/start_banshee.c
index c9d9f74..994d76e 100644
--- a/sw/snRuntime/src/start_banshee.c
+++ b/sw/snRuntime/src/start_banshee.c
@@ -35,6 +35,7 @@ void _snrt_init_team(uint32_t cluster_core_id, uint32_t cluster_core_num,
     team->global_mem.end = _snrt_banshee_global_end;
     team->cluster_mem.start = (uint64_t)spm_start;
     team->cluster_mem.end = (uint64_t)spm_end;
+    _snrt_team_current->root->barrier_reg_ptr = 0x40000038;
 
     // TLS caches of frequently used data
     _snrt_team_current = &team->base;
diff --git a/sw/snRuntime/src/start_cluster.S b/sw/snRuntime/src/start_cluster.S
index 6d39a70..656819a 100644
--- a/sw/snRuntime/src/start_cluster.S
+++ b/sw/snRuntime/src/start_cluster.S
@@ -27,18 +27,6 @@ _snrt_init_core_info:
     remu      a0, a0, a1 # calculate cluster-local core id
     ret
 
-# Must leave a0 untouched.
-_snrt_cluster_barrier:
-    .globl _snrt_cluster_barrier
-    addi      sp, sp, -4
-    sw        ra, 0(sp)
-    call      _snrt_barrier_reg_ptr
-    lw        a0, 0(a0)
-    mv        zero, a0
-    lw        ra, 0(sp)
-    addi      sp, sp, 4
-    ret
-
 # Mustn't use any non-temporary registers
 # Expecting:
 # - a0: device tree ptr ("bootdata" in `tb_lib.hh`)
diff --git a/sw/snRuntime/src/start_cluster.c b/sw/snRuntime/src/start_cluster.c
index 07a5773..53e2eba 100644
--- a/sw/snRuntime/src/start_cluster.c
+++ b/sw/snRuntime/src/start_cluster.c
@@ -94,10 +94,6 @@ void _snrt_init_team(uint32_t cluster_core_id, uint32_t cluster_core_num,
     snrt_int_init(team);
 }
 
-uint32_t _snrt_barrier_reg_ptr() {
-    return _snrt_team_current->root->barrier_reg_ptr;
-}
-
 extern uintptr_t volatile tohost, fromhost;
 
 // Provide an implementation for putchar.
diff --git a/sw/snRuntime/src/team.h b/sw/snRuntime/src/team.h
deleted file mode 100644
index 9c1fb31..0000000
--- a/sw/snRuntime/src/team.h
+++ /dev/null
@@ -1,45 +0,0 @@
-// Copyright 2020 ETH Zurich and University of Bologna.
-// Licensed under the Apache License, Version 2.0, see LICENSE for details.
-// SPDX-License-Identifier: Apache-2.0
-#pragma once
-#include "snrt.h"
-
-extern __thread struct snrt_team *_snrt_team_current;
-extern __thread uint32_t _snrt_core_idx;
-extern const uint32_t _snrt_team_size;
-
-struct snrt_team {
-    /// Pointer to the root team description of this cluster.
-    struct snrt_team_root *root;
-};
-
-struct snrt_allocator_inst {
-    // Base address from where allocation starts
-    uint32_t base;
-    // Number of bytes alloctable
-    uint32_t size;
-    // Address of the next allocated block
-    uint32_t next;
-};
-struct snrt_allocator {
-    struct snrt_allocator_inst l1;
-    struct snrt_allocator_inst l3;
-};
-
-// This struct is placed at the end of each clusters TCDM
-struct snrt_team_root {
-    struct snrt_team base;
-    const void *bootdata;
-    uint32_t global_core_base_hartid;
-    uint32_t global_core_num;
-    uint32_t cluster_idx;
-    uint32_t cluster_num;
-    uint32_t cluster_core_base_hartid;
-    uint32_t cluster_core_num;
-    snrt_slice_t global_mem;
-    snrt_slice_t cluster_mem;
-    struct snrt_allocator allocator;
-    struct snrt_barrier cluster_barrier;
-    uint32_t barrier_reg_ptr;
-    struct snrt_peripherals peripherals;
-};
-- 
2.16.5

