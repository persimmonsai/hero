
/include/ "occamy.dts"

/ {
  // Create a reserved memory region for Snitch program memory
  reserved-memory {
    #address-cells = <2>;
    #size-cells = <2>;
    ranges;
    snitch_mem: buffer@c0000000 {
        reg = <0x0 0xc0000000 0x0 0x10000000>;
    };
  };
  soc {
    eth_dma0: eth_dma@4d000000 {
      #dma-cells = <1>;
      #address-cells = <1>;
      #size-cells = <1>;
      compatible = "xlnx,axi-dma-1.00.a";
      reg = <0x0 0x4d000000 0x0 0x10000>;
      interrupts-extended = <&PLIC0 3 &PLIC0 4>;
      xlnx,addrwidth = <0x40>;
      xlnx,include-sg;
      dma-channel@4d000000 {
        compatible = "xlnx,axi-dma-mm2s-channel";
        reg = <0 0>;
        dma-channels = <0x1>;
        interrupts-extended = <&PLIC0 3>;
        xlnx,datawidth = <0x20>;
        xlnx,device-id = <0x0>;
        xlnx,include-dre ;
      };
      dma-channel@4d000030 {
        compatible = "xlnx,axi-dma-s2mm-channel";
        reg = <0 0>;
        dma-channels = <0x1>;
        interrupts-extended = <&PLIC0 4>;
        xlnx,datawidth = <0x20>;
        xlnx,device-id = <0x0>;
        xlnx,include-dre ;
      };
    };
    eth0: eth0@4c400000 {
      compatible = "xlnx,axi-ethernet-1.00.a";
      reg = <0x0 0x4c400000 0x0 0x40000>;
      // attacked to system clock, provide name for matching
      clocks = <&sysclk>, <&sysclk>;
      clock-names = "s_axi_lite_clk", "axis_clk";
      // interrupt and mac_irq
      interrupts-extended = <&PLIC0 1 &PLIC0 6>;
      // local-mac-address = [ 00 0A 35 04 E1 60 ]; // hero-vcu128-01
      local-mac-address = [ 00 0A 35 04 E1 52 ]; // hero-vcu128-02
      mac-address = [ 00 0A 35 04 E1 52 ];
      device_type = "network";
      axistream-connected = <&eth_dma0>;
      axistream-control-connected = <&eth_dma0>;
      phy-handle = <&dp83867_0>;
      // xlnx,phy-type = <0x4>; // XAE_PHY_TYPE_SGMII. linux: deprecated, use phy-mode
      phy-mode = "sgmii";
      xlnx,phyaddr = <0x0>;
      xlnx,rxcsum = <0x2>; // 0, 1, 2 for no/partial/full offloading
      xlnx,rxmem = <0x1000>;
      xlnx,txcsum = <0x2>; // 0, 1, 2 for no/partial/full offloading
      xlnx,txmem = <0x1000>;

      mdio: mdio {
        #address-cells = <1>;
        #size-cells = <0>;
        // reset-gpios = <&tca6416a 6 GPIO_ACTIVE_LOW>;
        // reset-delay-us = <2>;
        // PCS/PMA PHY
        xilinx_phy: ethernet-phy@0 {
          #phy-cells = <1>;
          device_type = "ethernet-phy";
          reg = <0>;
        };
        // External PHY
        dp83867_0: ethernet-phy@3 {
          compatible = "ethernet-phy-ieee802.3-c22";
          reg = <3>;
          #phy-cells = <1>;
          device_type = "ethernet-phy";
          ti,sgmii-ref-clock-output-enable;
          ti,dp83867-rxctrl-strap-quirk;
        };
      };
    };
    soc_ctl0: soc-control@2000000 {
      compatible = "eth,occamy-soc-control";
      reg-names = "soc-control";
      reg = <0x0 0x02000000 0x0 0x1000>;
    };
    quadrant_ctrl0: quadrant-control@b000000 {
      compatible = "eth,occamy-quadrant-control";
      reg-names = "quadrant-control";
      reg = <0x0 0x0b000000 0x0 0x10000>;
    };
    // Instantiate a snitch cluster
    snitch-cluster@10000000 {
      compatible = "eth,snitch-cluster";
      // TCDM and Peripheral spaces
      reg-names = "tcdm", "peripheral";
      reg = <0x0 0x10000000 0x0 0x20000>, <0x0 0x10020000 0x0 0x20000>;
      // points to a memory region reserved for use by the cluster
      memory-region = <&snitch_mem>;
      // cluster specific properties
      eth,compute-cores = <8>;
      eth,dm-cores = <1>;
      eth,quadrant-idx = <0>;
      eth,cluster-idx = <0>; // Used to calculate offsets in clint, soc-ctrl etc..
      // A handle to the soc-control register where isolates etc are located
      eth,soc-ctl = <&soc_ctl0>;
      // Handle to the associated quadrant controller
      eth,quadrant-ctrl = <&quadrant_ctrl0>;
      // handle to the clint where IPI interrupts are attached
      eth,clint = <&clint0>;
    };
  };
};
